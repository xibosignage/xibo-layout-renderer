import { Emitter, Unsubscribe } from 'nanoevents';
import { IMediaEvents } from '../../Modules/Media/Media';
import { IRegion } from '../Region';
import { OptionsType } from '../Layout';
export interface IMedia {
    checkIframeStatus: boolean;
    run(): void;
    divHeight: number;
    type: string;
    timeoutId: ReturnType<typeof setTimeout>;
    divWidth: number;
    tempSrc: string;
    duration: number;
    iframeName: string;
    loadIframeOnRun: boolean;
    xml: Element | null;
    containerName: string;
    ready: boolean;
    loop: boolean;
    options: OptionsType & {
        [k: string]: any;
    };
    useDuration: boolean;
    html: HTMLElement | null;
    id: string;
    mediaId: string;
    iframe: HTMLIFrameElement | null;
    render: string;
    attachedAudio: boolean;
    on<E extends keyof IMediaEvents>(event: E, callback: IMediaEvents[E]): Unsubscribe;
    init(): void;
    schemaVersion: string;
    index: number;
    mediaType: string;
    finished: boolean;
    uri: string;
    url: string | null;
    singlePlay: boolean;
    stop(): Promise<void>;
    idCounter: number;
    region: IRegion;
    fileId: string;
    emitter: Emitter<IMediaEvents>;
}
export declare const initialMedia: IMedia;
